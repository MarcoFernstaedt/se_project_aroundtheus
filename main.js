!function(){"use strict";class e{constructor(e){let{name:t,link:s,userId:r,_id:i,ownerId:n,isLiked:o,handleImageClick:a,handleDeleteClick:l,handleLikeClick:d,cardSelector:c}=e;this._name=t,this._link=s,this._userId=r,this._cardId=i,this._ownerId=n,this._isLiked=o,this._handleImageClick=a,this._handleDeleteClick=l,this._handleLikeClick=d,this._cardSelector=c}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeClick(this)})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})})),this._cardElement.querySelector(".card__trashButton").addEventListener("click",(()=>this._handleDeleteClick(this)))}_renderLikes(){this._isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}setLikes(e){this._isLiked=e,this._renderLikes()}deleteCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0),this._cardImage=this._cardElement.querySelector(".card__image"),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._setEventListeners(),this._renderLikes(),this._cardImage.src=this._link,this._cardImage.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t,this._inputElems=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitButton=this._formElement.querySelector(this._submitButtonSelector)}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=e.validationMessage,s.classList.add(this._errorClass)}_hasInvalidInput(){return!this._inputElems.every((e=>e.validity.valid))}resetValidation(){this.toggleButtonState(),this._inputElems.forEach((e=>{this._hideInputError(e)}))}toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton()}_setEventListeners(){this._inputElems.forEach(((e,t,s)=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){this._popup=document.querySelector(e)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};close(){this._popup.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}open(){this._popup.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popup.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__container-preview"))&&this.close(),e.target.classList.contains("modal__close")&&this.close()}))}}class r extends s{constructor(e,t){super(e),this._handleFormSubmit=t,this._form=this._popup.querySelector(".modal__form"),this._inputList=this._form.querySelectorAll(".modal__form-input"),this._submitButton=this._popup.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){return this._inputValues={},this._inputList.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setButtonText(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}setEventListeners(){this._form.addEventListener("submit",(()=>{this._data=this._getInputValues(),this._handleFormSubmit(this._data)})),super.setEventListeners()}close(){this._form.reset(),super.close()}}class i{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._selector=t,this._section=document.querySelector(this._selector)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._section.prepend(e)}}const n=document.querySelector(".profile__avatar-button"),o=(document.querySelector(".profile__image"),document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector(".profile__edit-button")),a=document.querySelector(".profile__add-button"),l=(document.forms["profile-form"],document.forms["card-form"]),d=document.querySelector("#profile-title-input"),c=document.querySelector("#profile-description-input"),h=(l.querySelector("#card-title-input"),l.querySelector("#card-image-input"),"#edit-avatar-modal"),{apiToken:_,apiUrl:u}={apiToken:"2aecf13b-f884-4550-afc8-5336476728b3",apiUrl:"https://around-api.en.tripleten-services.com/v1"};let m=null;const p=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleResponce(e){if(e.ok)return e.json();Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._handleResponce)}editUserInfo(e){let{name:t,job:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._handleResponce)}editProfilePhoto(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.avatar})}).then(this._handleResponce)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._handleResponce)}createCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then(this._handleResponce)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._handleResponce)}addCardLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._handleResponce)}removeCardLike(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._handleResponce)}}({baseUrl:u,headers:{authorization:_,"Content-Type":"application/json"}}),E=new class{constructor(e,t,s){this._nameElem=document.querySelector(e),this._jobElem=document.querySelector(t),this._avatarElem=document.querySelector(s)}getUserInfo(){return{name:this._nameElem.textContent,job:this._jobElem.textContent,avatar:this._avatarElem.src}}setUserInfo(e){let{name:t,job:s}=e;this._nameElem.textContent=t,this._jobElem.textContent=s}setAvatar(e){this._avatarElem.src=e,this._avatarElem.alt=this._nameElem.textContent}}(".profile__title",".profile__description",".profile__image"),f=e=>{b.setSubmitAction((()=>{b.setButtonText(!0),p.deleteCard(e._id).then((()=>{e.deleteCard(),b.close()})).catch((e=>{console.error(e)})).finally((()=>b.setButtonText(!1)))})),b.open()},v=e=>{e._isLiked?p.removeCardLike(e._cardId).then((()=>{e.setLikes(!1)})).catch((e=>{console.error(e)})):p.addCardLike(e._cardId).then((()=>{e.setLikes(!0)})).catch((e=>{console.error(e)}))},b=new class extends s{constructor(e){super(e),this._form=this._popup.querySelector(".modal__form")}open(){super.open()}close(){this._form.reset(),super.close()}setButtonText(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}setSubmitAction(e){this._handleFormSubmit=e}setEventListeners(){this._form.addEventListener("submit",(()=>{this._handleFormSubmit()})),super.setEventListeners()}}("#delete-modal");b.setEventListeners(),Promise.all([p.getUserInfo(),p.getInitialCards()]).then((e=>{let[t,s]=e;E.setUserInfo({name:t.name,job:t.about}),E.setAvatar(t.avatar),m=new i({items:s,renderer:e=>{m.addItem(S(e,null))}},".cards__list"),m.renderItems()})).catch((e=>{console.error(e)}));const k={};var L;L={formSelector:".modal__form",inputSelector:".modal__form-input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error-visible"},Array.from(document.querySelectorAll(L.formSelector)).forEach((e=>{const s=new t(L,e),r=e.getAttribute("name");k[r]=s,s.enableValidation()})),o.addEventListener("click",(()=>{const e=E.getUserInfo();d.value=e.name,c.value=e.job,B.open(),k["profile-form"].resetValidation()}));const S=(t,s)=>{let{name:r,link:i,_id:n,ownerId:o,isLiked:a}=t;return new e({name:r,link:i,userId:s,_id:n,ownerId:o,isLiked:a,handleImageClick:C,handleDeleteClick:f,handleLikeClick:v,cardSelector:"#card-template"}).getView()},C=e=>{let{name:t,link:s}=e;I.open({name:t,link:s})},y=new r(h,(e=>{y.setButtonText(!0),p.editProfilePhoto(e).then((e=>{E.setAvatar(e.avatar),y.close()})).catch((e=>{console.error(e)})).finally((()=>y.setButtonText()))}));y.setEventListeners();const I=new class extends s{constructor(e){super(e),this._title=this._popup.querySelector(".modal__caption"),this._image=this._popup.querySelector(".modal__image")}open(e){let{link:t,name:s}=e;this._title.textContent=s,this._image.src=t,this._image.alt=s,super.open()}}("#preview-card-modal");I.setEventListeners();const g=new r("#add-card-modal",(e=>{g.setButtonText(!0),p.createCard(e).then((e=>{m.addItem(S(e,null)),g.close()})).catch((e=>{console.error(e)})).finally((()=>g.setButtonText(!1)))}));g.setEventListeners();const B=new r("#edit-profile-modal",(e=>{B.setButtonText(!0),p.editUserInfo(e).then((e=>{E.setUserInfo({name:e.name,job:e.about}),B.close()})).then((()=>{console.log(E.getUserInfo())})).catch((e=>{console.error(e)})).finally((()=>B.setButtonText(!1)))}));B.setEventListeners(),n.addEventListener("click",(()=>{y.open(),k["avatar-form"].resetValidation()})),a.addEventListener("click",(()=>{g.open(),k["card-form"].resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,